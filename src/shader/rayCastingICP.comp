/***********************************************************************
 * @file	rayCastingICP.comp
 * @author	jjyou
 * @date	2024-4-25
 * @brief	This file implements ray casting algorithm for ICP.
***********************************************************************/

#version 450

layout (local_size_x = 32, local_size_y = 32) in;

/** @brief	Input TSDF volume.
  * 
  *			A storage buffer containing all information about the TSDF volume.
  */
layout(set = 0, binding = 0) readonly buffer TSDFVolume {
	uvec3 resolution;
	float size;
	vec3 corner;
	float truncationDistance;
	ivec2 data[];
} tsdfVolume;

/** @brief	Ray casting parameters.
  */
layout(set = 1, binding = 0) uniform RayCastingParameters {
	float fx, fy, cx, cy;
	mat4 invView;
	float minDepth;
	float maxDepth;
	float invalidDepth;
	float marchingStep;
} rayCastingParameters;

/** @brief	Output pyramid textures.
  * 
  *			Different from ray casting for visualization,
  *			ray casting for ICP produces a depth image, a vertex map,
  *			and a normal map.
  */
layout (set = 2, binding = 0, r32f) uniform image2D outputDepthImage;
layout (set = 2, binding = 1, rgba32f) uniform image2D outputVertexMap;
layout (set = 2, binding = 2, rgba32f) uniform image2D outputNormalMap;

#include "tsdfVolumeCommon.h"

#include "rayCastingCommon.h"

void main(){

	ivec2 outputPixelPos = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	ivec2 outputSize = imageSize(outputDepthImage);
	if (outputPixelPos.x >= outputSize.x || outputPixelPos.y >= outputSize.y)
		return;

	// Compute ray direction and origin in the world space
	vec3 rayOrigin = rayCastingParameters.invView[3].xyz;
	vec3 rayDir = vec3(
		(float(outputPixelPos.x) - rayCastingParameters.cx) / rayCastingParameters.fx,
		(float(outputPixelPos.y) - rayCastingParameters.cy) / rayCastingParameters.fy,
		1.0
	);
	float scaleFactor = length(rayDir);
	rayDir = normalize(mat3(rayCastingParameters.invView) * rayDir);

	// Ray casting
	float outDepth;
	vec3 outVertex;
	vec3 outNormal;
	float mask;
	float rayCastingResult = rayCasting(rayOrigin, rayDir, rayCastingParameters.minDepth * scaleFactor, rayCastingParameters.maxDepth * scaleFactor);
	if (isinf(rayCastingResult)) {
		outDepth = 1.0 / 0.0;
		outVertex = vec3(0.0, 0.0, 0.0);
		outNormal = vec3(0.0, 0.0, 0.0);
		mask = 0.0;
	} else {
		vec3 pos = rayOrigin + rayCastingResult * rayDir;
		outDepth = rayCastingResult / scaleFactor;
		outVertex = pos;
		outNormal = computeNormal(pos);
		mask = 1.0;
	}

	// Store
	imageStore(outputDepthImage, outputPixelPos, vec4(outDepth));
	imageStore(outputVertexMap, outputPixelPos, vec4(outVertex, mask));
	imageStore(outputNormalMap, outputPixelPos, vec4(outNormal, mask));
}