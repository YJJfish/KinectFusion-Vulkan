/***********************************************************************
 * @file	fusion.comp
 * @author	jjyou
 * @date	2024-4-12
 * @brief	This file implements the compute shader to fuse a frame into
 *			the TSDF volume.
***********************************************************************/

#version 450

layout (local_size_x = 32, local_size_y = 32) in;

/** @brief	Input TSDF volume.
  * 
  * A storage buffer containing all information about the TSDF volume.
  */
layout(set = 0, binding = 0) buffer TSDFVolume {
	uvec3 resolution;
	float size;
	vec3 corner;
	float truncationDistance;
	ivec2 data[];
} tsdfVolume;

/** @brief	Fusion parameters.
  */
layout(set = 1, binding = 0) uniform FusionParameters {
	float fx, fy, cx, cy;
	mat4 view;
	vec3 viewPos;
	int truncationWeight;
	float minDepth;
	float maxDepth;
	float invalidDepth;
} fusionParameters;

/** @brief	Input surface textures.
  */
layout (set = 2, binding = 0, rgba8) uniform image2D surfaceColorTexture;
layout (set = 2, binding = 1, r32f) uniform image2D surfaceDepthTexture;

#include "tsdfVolumeCommon.h"

void main() {
	if (gl_GlobalInvocationID.x >= tsdfVolume.resolution.x || gl_GlobalInvocationID.y >= tsdfVolume.resolution.y)
		return;
	ivec2 depthFrameSize = imageSize(surfaceDepthTexture);
	uint baseVoxelIndex = (gl_GlobalInvocationID.x * tsdfVolume.resolution.y + gl_GlobalInvocationID.y) * tsdfVolume.resolution.z;
	vec3 baseProjection = mat3(fusionParameters.view) * (vec3(gl_GlobalInvocationID.xy, 0.0) * tsdfVolume.size + tsdfVolume.corner) + fusionParameters.view[3].xyz;
	baseProjection.x = fusionParameters.fx * baseProjection.x + fusionParameters.cx * baseProjection.z;
	baseProjection.y = fusionParameters.fy * baseProjection.y + fusionParameters.cy * baseProjection.z;
	vec3 deltaProjection = mat3(fusionParameters.view) * vec3(0.0, 0.0, 1.0) * tsdfVolume.size;
	deltaProjection.x = fusionParameters.fx * deltaProjection.x + fusionParameters.cx * deltaProjection.z;
	deltaProjection.y = fusionParameters.fy * deltaProjection.y + fusionParameters.cy * deltaProjection.z;
	for (uint z = 0; z < tsdfVolume.resolution.z; ++z) {
		// Compute the voxel index
		uint voxelIndex = baseVoxelIndex + z;
		// Compute the projection of the voxel
		vec3 projection = baseProjection + float(z) * deltaProjection;
		if (projection.z <= 0.0) continue;
		// Read the depth value using the nearest pixel.
		ivec2 nearestPixel = ivec2(projection.xy / projection.z + vec2(0.5));
		if (nearestPixel.x < 0 || nearestPixel.x >= depthFrameSize.x || nearestPixel.y < 0 || nearestPixel.y >= depthFrameSize.y)
			continue;
		float pixelDepth = imageLoad(surfaceDepthTexture, nearestPixel).r;
		if (pixelDepth == fusionParameters.invalidDepth || pixelDepth < fusionParameters.minDepth || pixelDepth > fusionParameters.maxDepth)
			continue;
		// Update TSDF
		float sdf = pixelDepth - projection.z;
		if (sdf < -tsdfVolume.truncationDistance)
			continue;
		float tsdf = min(1.0, sdf / tsdfVolume.truncationDistance);
		float oldTSDF; int oldWeight;
		unpackVoxel(tsdfVolume.data[voxelIndex].x, oldTSDF, oldWeight);
		float newTSDF = (oldTSDF * float(oldWeight) + tsdf * 1.0) / float(oldWeight + 1);
		int newWeight = min(fusionParameters.truncationWeight, oldWeight + 1);
		packVoxel(newTSDF, newWeight, tsdfVolume.data[voxelIndex].x);
		// Update color if within sqrt(3.0) * voxel size
		if (-tsdfVolume.size * 1.732 <= sdf && sdf <= tsdfVolume.size * 1.732) {
			// Usually color map's resolution is larger than that of depth map, so we will simply do nearest lookup.
			ivec2 colorNearestPixel = ivec2(vec2(nearestPixel) / vec2(imageSize(surfaceDepthTexture)) * vec2(imageSize(surfaceColorTexture)));
			vec4 pixelColor = imageLoad(surfaceColorTexture, colorNearestPixel);
			vec4 oldColor;
			unpackColor(tsdfVolume.data[voxelIndex].y, oldColor);
			vec4 newColor = (oldColor * float(oldWeight) + pixelColor * 1.0) / float(oldWeight + 1);
			packColor(newColor, tsdfVolume.data[voxelIndex].y);
		}
	}
}